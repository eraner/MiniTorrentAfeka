//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiniTorrent_GUI.MediationReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MediationReference.IMediationServerContract")]
    public interface IMediationServerContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/SingIn", ReplyAction="http://tempuri.org/IMediationServerContract/SingInResponse")]
        bool SingIn(string jsonString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/SingIn", ReplyAction="http://tempuri.org/IMediationServerContract/SingInResponse")]
        System.Threading.Tasks.Task<bool> SingInAsync(string jsonString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/Authenticate", ReplyAction="http://tempuri.org/IMediationServerContract/AuthenticateResponse")]
        bool Authenticate(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/Authenticate", ReplyAction="http://tempuri.org/IMediationServerContract/AuthenticateResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/RequestAFile", ReplyAction="http://tempuri.org/IMediationServerContract/RequestAFileResponse")]
        string RequestAFile(string jsonString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/RequestAFile", ReplyAction="http://tempuri.org/IMediationServerContract/RequestAFileResponse")]
        System.Threading.Tasks.Task<string> RequestAFileAsync(string jsonString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/SignOut", ReplyAction="http://tempuri.org/IMediationServerContract/SignOutResponse")]
        bool SignOut(string jsonString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/SignOut", ReplyAction="http://tempuri.org/IMediationServerContract/SignOutResponse")]
        System.Threading.Tasks.Task<bool> SignOutAsync(string jsonString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/GetAvailableFiles", ReplyAction="http://tempuri.org/IMediationServerContract/GetAvailableFilesResponse")]
        string GetAvailableFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/GetAvailableFiles", ReplyAction="http://tempuri.org/IMediationServerContract/GetAvailableFilesResponse")]
        System.Threading.Tasks.Task<string> GetAvailableFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/GetIpListForAFile", ReplyAction="http://tempuri.org/IMediationServerContract/GetIpListForAFileResponse")]
        string GetIpListForAFile(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/GetIpListForAFile", ReplyAction="http://tempuri.org/IMediationServerContract/GetIpListForAFileResponse")]
        System.Threading.Tasks.Task<string> GetIpListForAFileAsync(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/UpdateUserFiles", ReplyAction="http://tempuri.org/IMediationServerContract/UpdateUserFilesResponse")]
        bool UpdateUserFiles(string jsonString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServerContract/UpdateUserFiles", ReplyAction="http://tempuri.org/IMediationServerContract/UpdateUserFilesResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserFilesAsync(string jsonString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediationServerContractChannel : MiniTorrent_GUI.MediationReference.IMediationServerContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediationServerContractClient : System.ServiceModel.ClientBase<MiniTorrent_GUI.MediationReference.IMediationServerContract>, MiniTorrent_GUI.MediationReference.IMediationServerContract {
        
        public MediationServerContractClient() {
        }
        
        public MediationServerContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MediationServerContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediationServerContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediationServerContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SingIn(string jsonString) {
            return base.Channel.SingIn(jsonString);
        }
        
        public System.Threading.Tasks.Task<bool> SingInAsync(string jsonString) {
            return base.Channel.SingInAsync(jsonString);
        }
        
        public bool Authenticate(string username, string password) {
            return base.Channel.Authenticate(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateAsync(string username, string password) {
            return base.Channel.AuthenticateAsync(username, password);
        }
        
        public string RequestAFile(string jsonString) {
            return base.Channel.RequestAFile(jsonString);
        }
        
        public System.Threading.Tasks.Task<string> RequestAFileAsync(string jsonString) {
            return base.Channel.RequestAFileAsync(jsonString);
        }
        
        public bool SignOut(string jsonString) {
            return base.Channel.SignOut(jsonString);
        }
        
        public System.Threading.Tasks.Task<bool> SignOutAsync(string jsonString) {
            return base.Channel.SignOutAsync(jsonString);
        }
        
        public string GetAvailableFiles() {
            return base.Channel.GetAvailableFiles();
        }
        
        public System.Threading.Tasks.Task<string> GetAvailableFilesAsync() {
            return base.Channel.GetAvailableFilesAsync();
        }
        
        public string GetIpListForAFile(string filename) {
            return base.Channel.GetIpListForAFile(filename);
        }
        
        public System.Threading.Tasks.Task<string> GetIpListForAFileAsync(string filename) {
            return base.Channel.GetIpListForAFileAsync(filename);
        }
        
        public bool UpdateUserFiles(string jsonString) {
            return base.Channel.UpdateUserFiles(jsonString);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserFilesAsync(string jsonString) {
            return base.Channel.UpdateUserFilesAsync(jsonString);
        }
    }
}
